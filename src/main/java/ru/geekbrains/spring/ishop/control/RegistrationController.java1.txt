package ru.geekbrains.spring.ishop.control;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.propertyeditors.StringTrimmerEditor;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.*;
import ru.geekbrains.spring.ishop.entity.User;
import ru.geekbrains.spring.ishop.service.UserService;
import ru.geekbrains.spring.ishop.utils.SystemUser;

import javax.servlet.http.HttpSession;
import javax.validation.Valid;

@Controller
@RequestMapping("/register")
public class RegistrationController1 {
    private UserService userService;

    @Autowired
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    private final Logger logger = LoggerFactory.getLogger(RegistrationController1.class);

    @InitBinder
    public void initBinder(WebDataBinder dataBinder) {
        StringTrimmerEditor stringTrimmerEditor = new StringTrimmerEditor(true);
        dataBinder.registerCustomEditor(String.class, stringTrimmerEditor);
    }

    // http://localhost:8080/shop/register/showRegistrationForm
    @GetMapping("/showRegistrationForm")
    public String showRegistrationFormPage(Model theModel) {
        theModel.addAttribute("systemUser", new SystemUser());
//        return "amin/registration-form";
        return "registration-form";
    }

    // http://localhost:8080/shop/register/processRegistrationForm
    // Binding Result после @ValidModel !!!
    @PostMapping("/processRegistrationForm")
    public String processRegistrationForm(
            @Valid @ModelAttribute("systemUser") SystemUser theSystemUser,
            BindingResult theBindingResult, Model theModel) {

        String userName = theSystemUser.getUserName();
        logger.debug("Processing registration form for: " + userName);
        if (theBindingResult.hasErrors()) {
//            return "amin/registration-form";
            return "registration-form";
        }
        User existing = userService.findByUserName(userName);
        if (existing != null) {
            // theSystemUser.setUserName(null);
            theModel.addAttribute("systemUser", theSystemUser);
            theModel.addAttribute("registrationError", "User with current username already exists");
            logger.debug("User name already exists.");
//            return "amin/registration-form";
            return "registration-form";
        }
        userService.save(theSystemUser);
        logger.debug("Successfully created user: " + userName);
        theModel.addAttribute("confirmationTitle", "Registration Confirmation");
        theModel.addAttribute("confirmationMessage", "User registered successfully!");
        theModel.addAttribute("confirmationAHref", "/login");
        theModel.addAttribute("confirmationAText", "Login with new user");
//        return "amin/registration-confirmation";
//        return "registration-confirmation";
        return "confirmation";
    }

    // http://localhost:8080/shop/register/showPasswordChangingForm
    @GetMapping("/showPasswordChangingForm")
    public String showPasswordChangingPage(HttpSession session, Model theModel) {
        User theUser = (User) session.getAttribute("user");
        theModel.addAttribute("systemUser", new SystemUser(theUser));
        return "password-changing-form";
    }

    // http://localhost:8080/shop/register/processPasswordChangingForm
    // Binding Result после @ValidModel !!!
    @PostMapping("/processPasswordChangingForm")
    public String processPasswordChangingForm(
            @Valid @ModelAttribute("systemUser") SystemUser theSystemUser,
            BindingResult theBindingResult, Model theModel) {

        String userName = theSystemUser.getUserName();
        logger.debug("Processing password changing form for: " + userName);
        if (theBindingResult.hasErrors()) {
            return "password-changing-form";
        }
        User existing = userService.findByUserName(userName);
        if (existing == null) {
            theModel.addAttribute("systemUser", theSystemUser);
            theModel.addAttribute("registrationError", "There is no user with current username!");
            logger.debug("There is no user with current username.");
            return "password-changing-form";
        }
        userService.updatePassword(userName, theSystemUser.getPassword());
        logger.debug("Successfully updated user password: " + userName);
        theModel.addAttribute("confirmationTitle", "Password Changing Confirmation");
        theModel.addAttribute("confirmationMessage", "The password has been changed successfully!");
        theModel.addAttribute("confirmationAHref", "/");
        theModel.addAttribute("confirmationAText", "Go to home page");
        return "confirmation";
    }

}
